"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voice = void 0;
const server_client_1 = require("@vonage/server-client");
const vetch_1 = require("@vonage/vetch");
const apiCallsToCalls = (call) => {
    delete call._links;
    const transformedCall = server_client_1.Client.transformers.camelCaseObjectKeys(call, true, true);
    delete transformedCall.conversationUuid;
    return {
        ...transformedCall,
        conversationUUID: call.conversation_uuid,
    };
};
class Voice extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.JWT;
    async *getAllCalls(params = {}) {
        let next = null;
        params.recordIndex = params?.recordIndex || 0;
        do {
            const resp = await this.getCallsPage(params);
            yield* resp?._embedded?.calls.map(apiCallsToCalls);
            next = resp?._links?.next ? new URL(resp._links.next.href) : null;
            if (next) {
                params.recordIndex = parseInt(next.searchParams.get('record_index'));
            }
        } while (next);
    }
    async getCallsPage(params) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/calls`, server_client_1.Client.transformers.snakeCaseObjectKeys(params));
        return {
            ...resp.data,
        };
    }
    async search(filter) {
        return this.getCallsPage(filter);
    }
    async getCall(uuid) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/calls/${uuid}`);
        return apiCallsToCalls(resp.data);
    }
    async createOutboundCall(call) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/calls`, server_client_1.Client.transformers.snakeCaseObjectKeys(call, true));
        const result = server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);
        delete result.conversationUuid;
        result.conversationUUID = resp.data.conversation_uuid;
        return result;
    }
    async playDTMF(uuid, digits) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/dtmf`, { digits: digits });
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    async playTTS(uuid, action) {
        delete action.action;
        delete action.bargeIn;
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`, server_client_1.Client.transformers.snakeCaseObjectKeys(action));
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    async stopTTS(uuid) {
        const resp = await this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`);
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    async streamAudio(uuid, url, loop = 1, volumeLevel = 0.0) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`, {
            stream_url: [url],
            loop,
            level: String(volumeLevel),
        });
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    async stopStreamAudio(uuid) {
        const resp = await this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`);
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    async transferCallWithNCCO(uuid, ncco) {
        return this.callAction(uuid, 'transfer', {
            type: 'ncco',
            ncco: ncco,
        });
    }
    async transferCallWithURL(uuid, url) {
        return this.callAction(uuid, 'transfer', {
            type: 'ncco',
            url: [url],
        });
    }
    async hangupCall(uuid) {
        return this.callAction(uuid, 'hangup');
    }
    async muteCall(uuid) {
        return this.callAction(uuid, 'mute');
    }
    async unmuteCall(uuid) {
        return this.callAction(uuid, 'unmute');
    }
    async earmuffCall(uuid) {
        return this.callAction(uuid, 'earmuff');
    }
    async unearmuffCall(uuid) {
        return this.callAction(uuid, 'unearmuff');
    }
    async downloadRecording(file, path) {
        const config = this.config;
        config.responseType = vetch_1.ResponseTypes.stream;
        const client = new server_client_1.FileClient(this.auth, config);
        return await client.downloadFile(file, path);
    }
    async downloadTranscription(file, path) {
        const config = this.config;
        config.responseType = vetch_1.ResponseTypes.text;
        const client = new server_client_1.FileClient(this.auth, config);
        return await client.downloadFile(file, path);
    }
    async callAction(uuid, action, destination) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, {
            action: action,
            ...(destination ? { destination: destination } : {}),
        });
    }
}
exports.Voice = Voice;
//# sourceMappingURL=voice.js.map