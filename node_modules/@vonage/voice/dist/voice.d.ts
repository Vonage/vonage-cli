import { AuthenticationType, Client } from '@vonage/server-client';
import { GetCallDetailsParameters, CallPageResponse, CallDetail, CallResult, CallUpdateResult, UpdateCallResponse, Action, TalkAction, OutboundCall } from './types/index';
import { CallListFilter } from './types';
type NCCODestination = {
    type: 'ncco';
    url?: Array<string>;
    ncco?: Array<Action>;
};
export declare class Voice extends Client {
    protected authType: AuthenticationType;
    getAllCalls(params?: GetCallDetailsParameters): AsyncGenerator<CallDetail, void & CallDetail, undefined>;
    getCallsPage(params: GetCallDetailsParameters): Promise<CallPageResponse>;
    search(filter?: CallListFilter): Promise<CallPageResponse>;
    getCall(uuid: string): Promise<CallDetail>;
    createOutboundCall(call: OutboundCall): Promise<CallResult>;
    playDTMF(uuid: string, digits: string): Promise<CallUpdateResult>;
    playTTS(uuid: string, action: TalkAction): Promise<CallUpdateResult>;
    stopTTS(uuid: string): Promise<CallUpdateResult>;
    streamAudio(uuid: string, url: string, loop?: number, volumeLevel?: number): Promise<UpdateCallResponse>;
    stopStreamAudio(uuid: string): Promise<CallUpdateResult>;
    transferCallWithNCCO(uuid: string, ncco: Action[]): Promise<void>;
    transferCallWithURL(uuid: string, url: string): Promise<void>;
    hangupCall(uuid: string): Promise<void>;
    muteCall(uuid: string): Promise<void>;
    unmuteCall(uuid: string): Promise<void>;
    earmuffCall(uuid: string): Promise<void>;
    unearmuffCall(uuid: string): Promise<void>;
    downloadRecording(file: string, path: string): Promise<void>;
    downloadTranscription(file: string, path: string): Promise<void>;
    protected callAction(uuid: string, action: string, destination?: NCCODestination): Promise<void>;
}
export {};
