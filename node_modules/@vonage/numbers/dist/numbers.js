"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Numbers = void 0;
const server_client_1 = require("@vonage/server-client");
const Feature_1 = require("./enums/Feature");
const SearchPattern_1 = require("./enums/SearchPattern");
const lodash_omit_1 = __importDefault(require("lodash.omit"));
const remapObjects = (mapping, newObject, oldObject) => {
    for (const key in mapping) {
        if (oldObject[mapping[key]]) {
            newObject[key] = oldObject[mapping[key]];
            delete oldObject[mapping[key]];
        }
    }
    newObject = { ...newObject, ...oldObject };
    return newObject;
};
const buildSearch = ({ endsWith, startsWith, contains, searchPattern, pattern, country, }) => {
    searchPattern = searchPattern ?? SearchPattern_1.SearchPattern.CONTAINS;
    if (pattern) {
        return {
            search_pattern: searchPattern,
            pattern: pattern,
            country: country,
        };
    }
    // order of precdent contains, endsWith, startsWith
    if (contains) {
        return {
            search_pattern: SearchPattern_1.SearchPattern.CONTAINS,
            pattern: contains,
            country: country,
        };
    }
    if (endsWith) {
        return {
            search_pattern: SearchPattern_1.SearchPattern.ENDS_WITH,
            pattern: endsWith,
            country: country,
        };
    }
    if (startsWith) {
        return {
            search_pattern: SearchPattern_1.SearchPattern.START_WITH,
            pattern: startsWith,
            country: country,
        };
    }
    return {};
};
const sortFeatures = (features) => {
    // API expects these as a CSV in a specific order
    if (features.length > 4) {
        throw new Error('Invalid number of features request');
    }
    if (features.length === 1) {
        return features.join();
    }
    if (features.length === 3) {
        return [Feature_1.Feature.SMS, Feature_1.Feature.MMS, Feature_1.Feature.VOICE].join(',');
    }
    const newOrder = [];
    if (features.includes(Feature_1.Feature.SMS)) {
        newOrder.push(Feature_1.Feature.SMS);
    }
    if (features.includes(Feature_1.Feature.VOICE)) {
        newOrder.push(Feature_1.Feature.VOICE);
    }
    if (features.includes(Feature_1.Feature.MMS)) {
        newOrder.push(Feature_1.Feature.MMS);
    }
    return newOrder.join(',');
};
class Numbers extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.QUERY_KEY_SECRET;
    async buyNumber(params) {
        const mapping = { target_api_key: 'targetApiKey' };
        const data = remapObjects(mapping, {}, params);
        const resp = await this.sendFormSubmitRequest(`${this.config.restHost}/number/buy`, data);
        return {
            errorCode: resp.data['error-code'],
            errorCodeLabel: resp.data['error-code-label'],
        };
    }
    async cancelNumber(params) {
        const mapping = { target_api_key: 'targetApiKey' };
        const data = remapObjects(mapping, {}, params);
        const resp = await this.sendFormSubmitRequest(`${this.config.restHost}/number/cancel`, data);
        return {
            errorCode: resp.data['error-code'],
            errorCodeLabel: resp.data['error-code-label'],
        };
    }
    async getAvailableNumbers(filter) {
        const mapping = {
            search_pattern: 'searchPattern',
        };
        const data = (0, lodash_omit_1.default)(remapObjects(mapping, {}, { ...filter, ...buildSearch(filter) }), ['startsWith', 'contains', 'endsWith', 'searchPattern']);
        if (data.features?.length > 0) {
            data.features = sortFeatures(data.features);
        }
        const resp = await this.sendGetRequest(`${this.config.restHost}/number/search`, data);
        return resp.data;
    }
    async getOwnedNumbers(filter) {
        if (!filter) {
            filter = {};
        }
        const resp = await this.sendGetRequest(`${this.config.restHost}/account/numbers`, server_client_1.Client.transformers.snakeCaseObjectKeys(filter));
        return resp.data;
    }
    async updateNumber(params) {
        const mapping = {
            app_id: 'applicationId',
        };
        const data = remapObjects(mapping, {}, params);
        const resp = await this.sendFormSubmitRequest(`${this.config.restHost}/number/update`, data);
        return {
            errorCode: resp.data['error-code'],
            errorCodeLabel: resp.data['error-code-label'],
        };
    }
}
exports.Numbers = Numbers;
//# sourceMappingURL=numbers.js.map