import { MultiStreamLayoutResponse } from './interfaces/Response/MultiStreamLayoutResponse';
import { SingleStreamLayoutResponse } from './interfaces/Response/SingleStreamLayoutResponse';
import { ProjectDetailsResponse } from './interfaces/Response/ProjectDetailsResponse';
import { ArchiveOptions } from './interfaces/ArchiveOptions';
import { SingleArchiveResponse } from './interfaces/Response/SingleArchiveResponse';
import { MultiArchiveResponse } from './interfaces/Response/MultiArchiveResponse';
import { ArchiveSearchFilter } from './interfaces/ArchiveSearchFilter';
import { ArchiveLayout } from './interfaces/ArchiveLayout';
import { MediaMode } from './interfaces/MediaMode';
import { ArchiveMode } from './interfaces/ArchiveMode';
import { Session } from './interfaces/Session';
import { StreamClassList } from './interfaces/StreamClassList';
import { ClientTokenOptions } from './interfaces/ClientTokenOptions';
import { AuthenticationType, Client } from '@vonage/server-client';
import { BroadcastConfig } from './interfaces/BroadcastConfig';
import { BroadcastDetailsResponse } from './interfaces/Response/BroadcastDetailsResponse';
import { BroadcastSearchFilter } from './interfaces/BroadcastSearchFilter';
import { MultiBroadcastResponse } from './interfaces/Response/MultiBroadcastResponse';
import { BroadcastUpdateConfig } from './interfaces/BroadcastUpdateConfig';
import { SIPCallOptions } from './interfaces/SIPCallOptions';
import { SIPCallResponse } from './interfaces/Response/SIPCallResponse';
import { WebSocketConfig } from './interfaces/WebSocketConfig';
import { WebSocketConnectResponse } from './interfaces/Response/WebSocketConnectResponse';
import { MultiExperienceComposerResponse } from './interfaces/Response/MultiExperienceComposerResponse';
import { ExperienceComposerResponse } from './interfaces/Response/ExperienceComposerResponse';
import { ExperienceComposerOptions } from './interfaces/ExperienceComposerOptions';
import { ExperienceComposerListFilter } from './interfaces/ExperienceComposerListFilter';
import { CaptionOptions } from './interfaces/CaptionOptions';
import { EnableCaptionResponse } from './interfaces/Response/EnableCaptionResponse';
import { CaptionStatusResponse } from './interfaces/Response/CaptionStatusResponse';
export declare class Video extends Client {
    protected authType: AuthenticationType;
    addArchiveStream(archiveId: string, streamId: string, audio?: boolean, video?: boolean): Promise<void>;
    addStreamToBroadcast(broadcastId: string, streamId: string): Promise<void>;
    connectToWebsocket(sessionId: string, clientToken: string, config: WebSocketConfig): Promise<WebSocketConnectResponse>;
    createSession(sessionOptions?: {
        archiveMode?: ArchiveMode;
        location?: string;
        mediaMode?: MediaMode;
    }): Promise<Session>;
    deleteArchive(archiveId: string): Promise<void>;
    disableCaptions(captionId: string): Promise<void>;
    disableForceMute(sessionId: string, excludedStreamIds?: string[]): Promise<ProjectDetailsResponse>;
    disconnectClient(sessionId: string, connectionId: string): Promise<void>;
    disconnectWebsocket(callId: string): Promise<void>;
    enableCaptions(sessionId: string, clientToken: string, captionOptions?: CaptionOptions): Promise<EnableCaptionResponse>;
    forceMuteAll(sessionId: string, excludedStreamIds?: string[]): Promise<ProjectDetailsResponse>;
    generateClientToken(sessionId: string, tokenOptions?: ClientTokenOptions): string;
    getArchive(archiveId: string): Promise<SingleArchiveResponse>;
    getBroadcast(broadcastId: string): Promise<BroadcastDetailsResponse>;
    getCaptionStatus(captionId: string): Promise<CaptionStatusResponse>;
    getExperienceComposerRender(renderId: string): Promise<ExperienceComposerResponse>;
    getStreamInfo(sessionId: string, streamId?: string): Promise<MultiStreamLayoutResponse | SingleStreamLayoutResponse>;
    private stripBlankValues;
    intiateSIPCall(sessionId: string, options: SIPCallOptions): Promise<SIPCallResponse>;
    listExperienceComposerRenders(filter: ExperienceComposerListFilter): Promise<MultiExperienceComposerResponse>;
    protected muteAllStreams(sessionId: string, active: boolean, excludedStreamIds?: string[]): Promise<ProjectDetailsResponse>;
    muteStream(sessionId: string, streamId: string): Promise<ProjectDetailsResponse>;
    playDTMF(sessionId: string, digits: string, connectionId?: string): Promise<void>;
    removeArchiveStream(archiveId: string, streamId: string): Promise<void>;
    removeStreamFromBroadcast(broadcastId: string, streamId: string): Promise<void>;
    searchArchives(filter?: ArchiveSearchFilter): Promise<MultiArchiveResponse>;
    searchBroadcasts(filter?: BroadcastSearchFilter): Promise<MultiBroadcastResponse>;
    sendSignal(signal: {
        type: string;
        data: string;
    }, sessionId: string, connectionId?: string): Promise<void>;
    setStreamClassLists(sessionId: string, settings: StreamClassList[]): Promise<void>;
    startArchive(sessionId: string, options?: ArchiveOptions): Promise<SingleArchiveResponse>;
    startBroadcast(sessionId: string, config: BroadcastConfig): Promise<BroadcastDetailsResponse>;
    startExperienceComposerRender(sessionId: string, token: string, config: ExperienceComposerOptions): Promise<ExperienceComposerResponse>;
    stopArchive(archiveId: string): Promise<SingleArchiveResponse>;
    stopBroadcast(broadcastId: string): Promise<BroadcastDetailsResponse>;
    stopExperienceComposerRender(renderId: string): Promise<void>;
    updateArchiveLayout(archiveId: string, layout: ArchiveLayout): Promise<void>;
    updateBroadcast(config: BroadcastUpdateConfig): Promise<void>;
}
