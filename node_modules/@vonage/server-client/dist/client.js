"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const auth_1 = require("@vonage/auth");
const vetch_1 = require("@vonage/vetch");
const AuthenticationType_1 = require("./enums/AuthenticationType");
const transfomers = __importStar(require("./transformers"));
const debug_1 = __importDefault(require("debug"));
const log = (0, debug_1.default)('vonage:server-client');
class Client {
    static transformers = transfomers;
    authType;
    auth;
    config;
    constructor(credentials, options) {
        // eslint-disable-next-line max-len
        this.auth = !Object.prototype.hasOwnProperty.call(credentials, 'getQueryParams')
            ? new auth_1.Auth(credentials)
            : credentials;
        this.config = {
            restHost: options?.restHost || 'https://rest.nexmo.com',
            apiHost: options?.apiHost || 'https://api.nexmo.com',
            videoHost: options?.videoHost || 'https://video.api.vonage.com',
            meetingsHost: options?.meetingsHost || 'https://api-eu.vonage.com',
            proactiveHost: options?.proactiveHost || 'https://api-eu.vonage.com',
            responseType: options?.responseType || vetch_1.ResponseTypes.json,
            timeout: options?.timeout || null,
        };
    }
    async addAuthenticationToRequest(request) {
        let requestPath = 'data';
        log(`adding ${this.authType || 'api key/secret'} to request`);
        switch (this.authType) {
            case AuthenticationType_1.AuthenticationType.BASIC:
                request.headers = Object.assign({}, request.headers, {
                    Authorization: await this.auth.createBasicHeader(),
                });
                return request;
            case AuthenticationType_1.AuthenticationType.JWT:
                request.headers = Object.assign({}, request.headers, {
                    Authorization: await this.auth.createBearerHeader(),
                });
                return request;
            case AuthenticationType_1.AuthenticationType.QUERY_KEY_SECRET:
                requestPath = 'params';
            // falls through
            case AuthenticationType_1.AuthenticationType.KEY_SECRET:
            default:
        }
        if (['GET', 'DELETE'].includes(request.method)) {
            requestPath = 'params';
        }
        const authParams = await this.auth.getQueryParams({});
        let params = {
            ...request[requestPath],
            ...authParams,
        };
        // This is most likely web-form
        if (!request[requestPath]
            && this.authType !== AuthenticationType_1.AuthenticationType.QUERY_KEY_SECRET) {
            requestPath = 'body';
            params = new URLSearchParams({
                ...Object.fromEntries(request.body.entries()),
                ...authParams,
            });
        }
        request[requestPath] = params;
        return request;
    }
    async sendDeleteRequest(url) {
        const request = {
            url,
            method: vetch_1.HTTPMethods.DELETE,
        };
        return await this.sendRequest(request);
    }
    async sendFormSubmitRequest(url, payload) {
        const request = {
            url,
            method: vetch_1.HTTPMethods.POST,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            ...(payload ? { body: new URLSearchParams(payload) } : {}),
        };
        return await this.sendRequest(request);
    }
    async sendGetRequest(url, queryParams) {
        const request = {
            url,
            method: vetch_1.HTTPMethods.GET,
            ...(queryParams ? { params: queryParams } : {}),
        };
        return await this.sendRequest(request);
    }
    async sendPatchRequest(url, payload) {
        return this.sendRequestWithData(vetch_1.HTTPMethods.PATCH, url, payload);
    }
    async sendPostRequest(url, payload) {
        return this.sendRequestWithData(vetch_1.HTTPMethods.POST, url, payload);
    }
    sendPutRequest(url, payload) {
        return this.sendRequestWithData(vetch_1.HTTPMethods.PUT, url, payload);
    }
    async sendRequestWithData(method, url, payload) {
        const request = {
            url,
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            ...(payload ? { data: payload } : {}),
        };
        return await this.sendRequest(request);
    }
    async sendRequest(request) {
        request.timeout = this.config.timeout;
        request = await this.addAuthenticationToRequest(request);
        const vetch = new vetch_1.Vetch(this.config);
        const result = await vetch.request(request);
        return result;
    }
}
exports.Client = Client;
//# sourceMappingURL=client.js.map