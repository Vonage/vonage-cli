import { AuthInterface, AuthParams } from '@vonage/auth';
import { VetchResponse, VetchOptions, HTTPMethods } from '@vonage/vetch';
import { AuthenticationType } from './enums/AuthenticationType';
import * as transfomers from './transformers';
import { ConfigParams } from './types/index';
export declare abstract class Client {
    static transformers: typeof transfomers;
    protected authType?: AuthenticationType;
    protected auth: AuthInterface;
    protected config: ConfigParams;
    constructor(credentials: AuthInterface | AuthParams, options?: ConfigParams);
    addAuthenticationToRequest(request: VetchOptions): Promise<VetchOptions>;
    sendDeleteRequest<T>(url: string): Promise<VetchResponse<T>>;
    sendFormSubmitRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendGetRequest<T>(url: string, queryParams?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendPatchRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendPostRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendPutRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendRequestWithData<T>(method: HTTPMethods, url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendRequest<T>(request: VetchOptions): Promise<VetchResponse<T>>;
}
