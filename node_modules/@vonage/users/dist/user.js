"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Users = void 0;
const server_client_1 = require("@vonage/server-client");
const apiUserToUser = (apiUser) => {
    const user = server_client_1.Client.transformers.camelCaseObjectKeys(apiUser, true);
    delete user.links;
    delete user.properties?.customData;
    if (apiUser.properties) {
        user.properties.customData = apiUser.properties?.custom_data;
    }
    if (apiUser?.channels?.websocket) {
        user.channels.websocket = apiUser.channels.websocket.map((apiSocket) => {
            const socket = {
                uri: apiSocket.uri,
            };
            if (apiSocket['content-type']) {
                socket.contentType = apiSocket['content-type'];
            }
            if (apiSocket.headers) {
                socket.headers = apiSocket.headers;
            }
            return socket;
        });
    }
    return user;
};
const userToAPI = (user) => {
    const apiUser = server_client_1.Client.transformers.snakeCaseObjectKeys(user, true);
    // preserve user properties
    if (apiUser.properties?.custom_data) {
        apiUser.properties.custom_data = user.properties.customData;
    }
    // Websockets will change when transformed
    if (apiUser.channels?.websocket) {
        apiUser.channels.websocket = user.channels.websocket.map((socket) => {
            const apiSocket = {
                uri: socket.uri,
            };
            // restore content type
            if (socket.contentType) {
                apiSocket['content-type'] = socket.contentType;
            }
            // preserve headers
            if (socket.headers) {
                apiSocket.headers = socket.headers;
            }
            return apiSocket;
        });
    }
    delete apiUser.id;
    return apiUser;
};
class Users extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.JWT;
    async *listAllUsers(params = {}) {
        let cursor = params.cursor;
        do {
            if (cursor) {
                params.cursor = cursor;
            }
            const resp = await this.getUserPage(params);
            yield* resp._embedded?.users.map(apiUserToUser);
            const next = resp._links?.next?.href
                ? new URL(resp._links.next.href)
                : null;
            cursor = next ? next.searchParams.get('cursor') : null;
        } while (cursor);
    }
    async getUserPage(params = {}) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/users`, server_client_1.Client.transformers.snakeCaseObjectKeys(params, true));
        return resp.data;
    }
    async createUser(user) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/users`, userToAPI(user));
        return apiUserToUser(resp.data);
    }
    async getUser(userId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/users/${userId}`);
        return apiUserToUser(resp.data);
    }
    async updateUser(user) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/users/${user.id}`, userToAPI(user));
        return apiUserToUser(resp.data);
    }
    async deleteUser(userId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v1/users/${userId}`);
    }
}
exports.Users = Users;
//# sourceMappingURL=user.js.map