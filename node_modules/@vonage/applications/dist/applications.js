"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Applications = void 0;
const server_client_1 = require("@vonage/server-client");
const apiToApplication = (response) => {
    delete response?._links;
    return server_client_1.Client.transformers.camelCaseObjectKeys(response, true, true);
};
class Applications extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.BASIC;
    async listApplications(filter) {
        return this.getApplicationPage(filter);
    }
    async *listAllApplications(params = {}) {
        let next = null;
        params.page = params?.page || 1;
        do {
            const resp = await this.getApplicationPage(params);
            yield* resp._embedded?.applications;
            next = resp._links?.next;
            params.page++;
        } while (next);
    }
    async getApplicationPage(filter) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/applications`, server_client_1.Client.transformers.snakeCaseObjectKeys(filter));
        if (resp.data._embedded?.applications) {
            resp.data._embedded.applications
                = resp.data._embedded.applications.map(apiToApplication);
        }
        return {
            ...resp.data,
            totalItems: resp.data.total_items,
            totalPages: resp.data.total_pages,
            pageSize: resp.data.page_size,
        };
    }
    async createApplication(application) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/applications`, server_client_1.Client.transformers.snakeCaseObjectKeys(application, true));
        return apiToApplication(resp.data);
    }
    async getApplication(applicationId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/applications/${applicationId}`);
        return apiToApplication(resp.data);
    }
    async updateApplication(application) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v2/applications/${application.id}`, server_client_1.Client.transformers.snakeCaseObjectKeys(application, true));
        return apiToApplication(resp.data);
    }
    async deleteApplication(applicationId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v2/applications/${applicationId}`);
    }
}
exports.Applications = Applications;
//# sourceMappingURL=applications.js.map